#빈도수 분석 → 시각화:워드크라우드 
#연관성 분석 → 
#데이터프레임 = 열의갯수를 프레임으로 만든 것 
 → 단어가 수백개가 넘기에 데이터프레임만으로 분석이 불가. 매트릭스구조 사용

#매트릭스
#영문텍스트분석에 특화된 tm패키지 등에 매트릭스 사용 
#konlpy 패키지

#명목형변수 - 집계 가능한 '목적성'있는 자료 - factor 
----------------------------------------------------------------------

EDA


#csv
 -',' '.' 단위로 구분된 일반적인 editor창에서 불러올 수 있는 자료 (글자만 도출) 

dir()

#현재 작업디렉토리명을 가져오자
getwd()

setwd("C:/Sources/StudyR/day2/전국무인교통단속카메라표준데이터.csv")
dir()


#아래 df=read.csv와 같은 명령
#fileName="전국무인교통단속카메라표준데이터.csv"
#df=read.csv(fileName)

df = read.csv("전국무인교통단속카메라표준데이터.csv")
head(df)
str(df)
table(df$시도명) #도출시 맨위 시도명 아래 갯수
barplot(table(df$시도명))

#subset(iris,species='setosa')
head(subset(df,시도명=='01'))  #df에서 시도명이 01이 위 6행만 나오게끔

#시도명 01찾기! (시도명01,03,10,9)
tmp = subset(df,시도명=='01')
str(tmp)
summary(tmp$시군구명) #character이기에 빈도수 집계를 해주지않는데, factor를 사용하면 빈도수 집계가능 

#시군구명이 과연 '서초구'만 있나
summary(factor(tmp$시군구명))
table(tmp$시군구명)
unique(tmp$시군구명)

summary(factor(tmp$소재지도로명주소))
table(tmp$소재지도로명주소)
unique(tmp$소재지도로명주소)
----------------------------------------------------------------------
# 데이터 형 변환 (자주사용하면 factor로 변환하는 것이 좋음)
# 1. character factor로 변환
# 시도명,시군구명,도로종류,도로노선명


# 2. 숫자를 factor로 변환하는 파생변수(+,-,*와 같은 새로만들어진 변수)
# 설치연도, 제한속도  
----------------------------------------------------------------------
df$시도명=factor(df$시도명)
df[,3]=factor(df[,3])
df[,4]=factor(df[,4])
df[,6]=factor(df[,6])
str(df)
summary(df)
levels(df[,2])

#숫자를 factor로 변환하는 파생변수
df$설치연도Factor=factor(df$설치연도)
df[,25]=factor(df$제한속도)
str(df)

summary(df)
plot(df[,24])

#변수값 찾기 
str(df)
ncol(df) #df column(열)의 갯수 확인 

#제한속도 평균값 찾기
ma=df$제한속도

dim(ma)
nrow(ma)
ncol(ma)
length(ma) #데이터 자체가 1개 그래서 위 함수들이 다 null값이 나옴 


ma=df[,c(10:11)]
head(ma)
colSums(ma) #열합  도출되는 결과를 볼 시 위도와 경도 각각의 열합을 확인 
rowSums(ma)  #행합

#as matrix를 해줘야 매트릭스구조 

###########################################
#####2. 컬럼명 정리
##### names(df)작업해서 인덱싱 번호에다가 컬럼명 변경
##### names(df)=c('','')....
###########################################
names(df)[1] = '카메라NUM'
names(df)[25] = '제한속도factor'
names(df)

#paste('e','k',1222,sep='') #paste문자열 연결/sep=''공백제거
names(df)[1] = paste(names(df)[1],'-bu',sep='') #R은 문자열 연결을 +로 못함
str(df)
 
help(paste)
###########################################
###3. 필요한 컬럼만 모아서 별도의 데이터셋 제작 
### 첫번째: 불필요한 칼럼을 제거함으로서 수행속도를 높임
### 두번째: 분석하고자 하는 내용에 맞게끔 새로운 데이터프레임 구성
###########################################
names(df)

df1=df[,c(2,3,4,7,11,13,14,16)]
str(df1)
df2=df[,c(10,11,13,14)] #위경도로 지도를 그리고싶으먄

############################################
### 4. 조건에 맞는 자료만 필터링해서 새로운 데이터 셋 제작
### subset으로
############################################
str(df1)
#미션, 단속구분을 unique 
unique(df1$단속구분)

#subset을 이용하여 단속구분이 1인 자료만 필터링해보세요
#subset을 이용하여 제한속도가 50인 자료만 필터링 
subset(df1,df1$단속구분=="1")
subset(df1,df1$제한속도==50) #숫자데이터는 쌍따옴표 쓰지않는다
#subset을 이용하여 단속구분이 1제외하고 필터링
subset(df1,df1$단속구분!='1')
#subset을 이용하여서 단속구분이 1이면서 (&) 시도명이 '경기도'인 자료 
subset(df1,df1$단속구분=='1'& df1$시도명=='경기도')

#r은 시도.경기도 가능! 

############################################
### 5. 자료셋을 새로 제작해서 csv로 저장하기 
### 
############################################
unique(df1$시도명)

sido=unique(df1$시도명)
sido
index=1
tmp=subset(df1,시도명==sido[index])
head(tmp)
head(rownames(tmp))


sido=unique(df$시도명)
cnt=length(sido) #cnt를 length해주는 이유:시도의 길이가 나옴. 이 길이값을 index에 넣음


#경기도라는 파일 생성하기 (write함수에 tmp라는 변수를 fileName으로 저장하기)
index=1
sido[1]
tmp=subset(df1,시도명==sido[index])
fileName=paste(sido[index],'.csv',sep='')
write.csv(tmp,fileName)

length(unique(df$시군구명)) #중복값을제외한 시군구명

#for문이용하여 저장하기   #시군구로 할 시 length로 보면 266개 나옴 그럼 index1:266
for(index in 1:cnt){
tmp=subset(df1,시도명==sido[index])
fileName=paste('./저장/',sido[index],'.csv',sep='')
write.csv(tmp,fileName)
}
----------------------------------------------------------------------
#폴더명제작
tmp=names(df1)
index=1
findCol=tmp[index]
폴더명=paste('./저장/',findCol,'/',sep='') '/'=>저장을 위해 슬래쉬 들어가는게 좋음
dir.create(폴더명)
--------------------------------------------------------------------
dataList=unique(df1[,index])
for (index2 in 1:length(dataList)){
      tmp=subset(df1,df1[,index]=='index2')
      fileName = paste(폴더명,tmp,'.csv',sep='')
      write.csv(tmp.fileName)
--------------------------------------------------------------------

############################################
### R메모리 모두 제거
### rm(list=ls())
############################################
rm(list=ls()) #df란 메모리를 모두 제거!
ls() 
df 



다시 불러오기
dir()
df = read.csv("전국무인교통단속카메라표준데이터.csv")

############################################
### 데이터로드 후 재작업해서 다시 로드
############################################
빈도수,count의 의미가 있는 함수 = factor

df=read.csv(dir()[4],stringsAsFactors = TRUE)

#df의 1~9번열만 df1에 할당
df1=df[,c(1:9)]
summary(df1)

#작업자료.csv만들기 
df1=df[,c(1:9)]
write.csv(df1,'작업자료.csv')
dir()

#메모리변수 모두 제거
rm(list=ls())

#작업자료factor만 도출
df=read.csv('작업자료.csv',stringsAsFactors = TRUE)
df=df[,-1]
str(df)

#############################################
###기술통계
#############################################

names(df)[2]
class(names(df)[2])
summary(df[,2])
data.frame(빈도수=summary(df[,2])) #정보가 숫자로 되어있으면,dataframe불가

#############################################
### NA값 지우기
#############################################
sum(is.na(df))
colName=names(df)
cnt=length(colName)
for(i in 1:cnt){
    print(colName[i])
    print(sum(is.na(df[,i])))
}


#R에서 결측치 시각화 
#결측치 패키지_ library값은 패키지명과 동일

install.packages('naniar')
library(naniar) #naniar 패키지를 불러옵니다.
naniar::miss_case_summary(df) # case : 행 기준
naniar::miss_var_summary(df) # variable : 변수 기준
naniar::vis_miss(df)
naniar::gg_miss_var(df)
naniar::gg_miss_upset(df)

install.packages('VIM')
library(VIM);
VIM::aggr(df)

install.packages('Amelia')
library(Amelia)
missmap(df)

#R에서 plot창 저장
savePlot("무인카메라결측치",type="png")
-----

 
